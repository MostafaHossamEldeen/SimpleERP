//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EMax.DbModels
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class VanSalesDbModelEntities : DbContext
    {
        public VanSalesDbModelEntities()
            : base("name=VanSalesDbModelEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<gl_accbranchs> gl_accbranchs { get; set; }
        public virtual DbSet<gl_accpay> gl_accpay { get; set; }
        public virtual DbSet<gl_chart> gl_chart { get; set; }
        public virtual DbSet<gl_vocherdtls> gl_vocherdtls { get; set; }
        public virtual DbSet<gl_vouchers> gl_vouchers { get; set; }
        public virtual DbSet<hr_doc> hr_doc { get; set; }
        public virtual DbSet<hr_employees> hr_employees { get; set; }
        public virtual DbSet<hr_masterfiles> hr_masterfiles { get; set; }
        public virtual DbSet<hr_monthyear> hr_monthyear { get; set; }
        public virtual DbSet<hr_salarydtls> hr_salarydtls { get; set; }
        public virtual DbSet<hr_salarypaid> hr_salarypaid { get; set; }
        public virtual DbSet<hr_salaryprep> hr_salaryprep { get; set; }
        public virtual DbSet<hr_salaryvarables> hr_salaryvarables { get; set; }
        public virtual DbSet<hr_vactions> hr_vactions { get; set; }
        public virtual DbSet<p_inv> p_inv { get; set; }
        public virtual DbSet<p_invdtls> p_invdtls { get; set; }
        public virtual DbSet<p_invpay> p_invpay { get; set; }
        public virtual DbSet<p_order> p_order { get; set; }
        public virtual DbSet<p_orderdtls> p_orderdtls { get; set; }
        public virtual DbSet<p_reqdtls> p_reqdtls { get; set; }
        public virtual DbSet<p_request> p_request { get; set; }
        public virtual DbSet<p_suppgroup> p_suppgroup { get; set; }
        public virtual DbSet<p_supplier> p_supplier { get; set; }
        public virtual DbSet<pay_doc> pay_doc { get; set; }
        public virtual DbSet<rec_doc> rec_doc { get; set; }
        public virtual DbSet<s_custgroup> s_custgroup { get; set; }
        public virtual DbSet<s_customers> s_customers { get; set; }
        public virtual DbSet<s_inv> s_inv { get; set; }
        public virtual DbSet<s_invdtls> s_invdtls { get; set; }
        public virtual DbSet<s_invpay> s_invpay { get; set; }
        public virtual DbSet<s_order> s_order { get; set; }
        public virtual DbSet<s_orderdtls> s_orderdtls { get; set; }
        public virtual DbSet<s_sman> s_sman { get; set; }
        public virtual DbSet<st_fillcomp> st_fillcomp { get; set; }
        public virtual DbSet<st_group> st_group { get; set; }
        public virtual DbSet<st_inventdlts> st_inventdlts { get; set; }
        public virtual DbSet<st_inventory> st_inventory { get; set; }
        public virtual DbSet<st_items> st_items { get; set; }
        public virtual DbSet<st_itemunit> st_itemunit { get; set; }
        public virtual DbSet<st_itemwh> st_itemwh { get; set; }
        public virtual DbSet<st_transactions> st_transactions { get; set; }
        public virtual DbSet<st_transdtls> st_transdtls { get; set; }
        public virtual DbSet<st_unit> st_unit { get; set; }
        public virtual DbSet<sys_branch> sys_branch { get; set; }
        public virtual DbSet<sys_company> sys_company { get; set; }
        public virtual DbSet<sys_costcenter> sys_costcenter { get; set; }
        public virtual DbSet<sys_docupload> sys_docupload { get; set; }
        public virtual DbSet<sys_fillcomp> sys_fillcomp { get; set; }
        public virtual DbSet<sys_modules> sys_modules { get; set; }
        public virtual DbSet<sys_pages> sys_pages { get; set; }
        public virtual DbSet<sys_paytype> sys_paytype { get; set; }
        public virtual DbSet<sys_urpages> sys_urpages { get; set; }
        public virtual DbSet<sys_userdbord> sys_userdbord { get; set; }
        public virtual DbSet<sys_userprep> sys_userprep { get; set; }
        public virtual DbSet<sys_years> sys_years { get; set; }
        public virtual DbSet<AspNetRole> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUser> AspNetUsers { get; set; }
        public virtual DbSet<hr_loans> hr_loans { get; set; }
        public virtual DbSet<s_invmeasure> s_invmeasure { get; set; }
        public virtual DbSet<s_ItemHs2> s_ItemHs2 { get; set; }
    
        public virtual int sp_MScleanupmergepublisher()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_MScleanupmergepublisher");
        }
    
        public virtual int sp_MSrepl_startup()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_MSrepl_startup");
        }
    
        public virtual ObjectResult<s_custgroup_sel_Result> s_custgroup_sel()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<s_custgroup_sel_Result>("s_custgroup_sel");
        }
    
        public virtual int s_customers_del(Nullable<int> custid, ObjectParameter errorid, ObjectParameter errormsg)
        {
            var custidParameter = custid.HasValue ?
                new ObjectParameter("custid", custid) :
                new ObjectParameter("custid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("s_customers_del", custidParameter, errorid, errormsg);
        }
    
        public virtual int s_customers_ins(string custname, string custename, Nullable<int> sgrpid, string custadd, string custtel, string custmob, string custvat, Nullable<int> custchartid, Nullable<int> smanid, Nullable<decimal> discp, Nullable<decimal> custlimit, Nullable<int> custlimitd, Nullable<bool> stopcust, ObjectParameter errorid, ObjectParameter errormsg)
        {
            var custnameParameter = custname != null ?
                new ObjectParameter("custname", custname) :
                new ObjectParameter("custname", typeof(string));
    
            var custenameParameter = custename != null ?
                new ObjectParameter("custename", custename) :
                new ObjectParameter("custename", typeof(string));
    
            var sgrpidParameter = sgrpid.HasValue ?
                new ObjectParameter("sgrpid", sgrpid) :
                new ObjectParameter("sgrpid", typeof(int));
    
            var custaddParameter = custadd != null ?
                new ObjectParameter("custadd", custadd) :
                new ObjectParameter("custadd", typeof(string));
    
            var custtelParameter = custtel != null ?
                new ObjectParameter("custtel", custtel) :
                new ObjectParameter("custtel", typeof(string));
    
            var custmobParameter = custmob != null ?
                new ObjectParameter("custmob", custmob) :
                new ObjectParameter("custmob", typeof(string));
    
            var custvatParameter = custvat != null ?
                new ObjectParameter("custvat", custvat) :
                new ObjectParameter("custvat", typeof(string));
    
            var custchartidParameter = custchartid.HasValue ?
                new ObjectParameter("custchartid", custchartid) :
                new ObjectParameter("custchartid", typeof(int));
    
            var smanidParameter = smanid.HasValue ?
                new ObjectParameter("smanid", smanid) :
                new ObjectParameter("smanid", typeof(int));
    
            var discpParameter = discp.HasValue ?
                new ObjectParameter("discp", discp) :
                new ObjectParameter("discp", typeof(decimal));
    
            var custlimitParameter = custlimit.HasValue ?
                new ObjectParameter("custlimit", custlimit) :
                new ObjectParameter("custlimit", typeof(decimal));
    
            var custlimitdParameter = custlimitd.HasValue ?
                new ObjectParameter("custlimitd", custlimitd) :
                new ObjectParameter("custlimitd", typeof(int));
    
            var stopcustParameter = stopcust.HasValue ?
                new ObjectParameter("stopcust", stopcust) :
                new ObjectParameter("stopcust", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("s_customers_ins", custnameParameter, custenameParameter, sgrpidParameter, custaddParameter, custtelParameter, custmobParameter, custvatParameter, custchartidParameter, smanidParameter, discpParameter, custlimitParameter, custlimitdParameter, stopcustParameter, errorid, errormsg);
        }
    
        public virtual ObjectResult<s_customers_sel_Result> s_customers_sel()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<s_customers_sel_Result>("s_customers_sel");
        }
    
        public virtual ObjectResult<s_customers_sel_custid_Result> s_customers_sel_custid(Nullable<int> custid)
        {
            var custidParameter = custid.HasValue ?
                new ObjectParameter("custid", custid) :
                new ObjectParameter("custid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<s_customers_sel_custid_Result>("s_customers_sel_custid", custidParameter);
        }
    
        public virtual ObjectResult<s_customers_sel_search_Result> s_customers_sel_search(string searchval)
        {
            var searchvalParameter = searchval != null ?
                new ObjectParameter("searchval", searchval) :
                new ObjectParameter("searchval", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<s_customers_sel_search_Result>("s_customers_sel_search", searchvalParameter);
        }
    
        public virtual int s_customers_upd(Nullable<int> custid, string custcode, string custname, string custename, Nullable<int> sgrpid, string custadd, string custtel, string custmob, string custvat, Nullable<int> custchartid, Nullable<int> smanid, Nullable<decimal> discp, Nullable<decimal> custlimit, Nullable<int> custlimitd, Nullable<bool> stopcust, ObjectParameter errorid, ObjectParameter errormsg)
        {
            var custidParameter = custid.HasValue ?
                new ObjectParameter("custid", custid) :
                new ObjectParameter("custid", typeof(int));
    
            var custcodeParameter = custcode != null ?
                new ObjectParameter("custcode", custcode) :
                new ObjectParameter("custcode", typeof(string));
    
            var custnameParameter = custname != null ?
                new ObjectParameter("custname", custname) :
                new ObjectParameter("custname", typeof(string));
    
            var custenameParameter = custename != null ?
                new ObjectParameter("custename", custename) :
                new ObjectParameter("custename", typeof(string));
    
            var sgrpidParameter = sgrpid.HasValue ?
                new ObjectParameter("sgrpid", sgrpid) :
                new ObjectParameter("sgrpid", typeof(int));
    
            var custaddParameter = custadd != null ?
                new ObjectParameter("custadd", custadd) :
                new ObjectParameter("custadd", typeof(string));
    
            var custtelParameter = custtel != null ?
                new ObjectParameter("custtel", custtel) :
                new ObjectParameter("custtel", typeof(string));
    
            var custmobParameter = custmob != null ?
                new ObjectParameter("custmob", custmob) :
                new ObjectParameter("custmob", typeof(string));
    
            var custvatParameter = custvat != null ?
                new ObjectParameter("custvat", custvat) :
                new ObjectParameter("custvat", typeof(string));
    
            var custchartidParameter = custchartid.HasValue ?
                new ObjectParameter("custchartid", custchartid) :
                new ObjectParameter("custchartid", typeof(int));
    
            var smanidParameter = smanid.HasValue ?
                new ObjectParameter("smanid", smanid) :
                new ObjectParameter("smanid", typeof(int));
    
            var discpParameter = discp.HasValue ?
                new ObjectParameter("discp", discp) :
                new ObjectParameter("discp", typeof(decimal));
    
            var custlimitParameter = custlimit.HasValue ?
                new ObjectParameter("custlimit", custlimit) :
                new ObjectParameter("custlimit", typeof(decimal));
    
            var custlimitdParameter = custlimitd.HasValue ?
                new ObjectParameter("custlimitd", custlimitd) :
                new ObjectParameter("custlimitd", typeof(int));
    
            var stopcustParameter = stopcust.HasValue ?
                new ObjectParameter("stopcust", stopcust) :
                new ObjectParameter("stopcust", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("s_customers_upd", custidParameter, custcodeParameter, custnameParameter, custenameParameter, sgrpidParameter, custaddParameter, custtelParameter, custmobParameter, custvatParameter, custchartidParameter, smanidParameter, discpParameter, custlimitParameter, custlimitdParameter, stopcustParameter, errorid, errormsg);
        }
    
        public virtual ObjectResult<s_inv_bind_Result> s_inv_bind(Nullable<int> sinvid)
        {
            var sinvidParameter = sinvid.HasValue ?
                new ObjectParameter("sinvid", sinvid) :
                new ObjectParameter("sinvid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<s_inv_bind_Result>("s_inv_bind", sinvidParameter);
        }
    
        public virtual int s_inv_del(Nullable<int> sinvid, ObjectParameter errorid, ObjectParameter errormsg)
        {
            var sinvidParameter = sinvid.HasValue ?
                new ObjectParameter("sinvid", sinvid) :
                new ObjectParameter("sinvid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("s_inv_del", sinvidParameter, errorid, errormsg);
        }
    
        public virtual int s_inv_ins(ObjectParameter sinvnomax, string sinvdocno, Nullable<System.DateTime> sinvdata, Nullable<int> sinvpay, string sinvpayname, Nullable<int> branchid, string branchname, Nullable<int> custid, string custname, string custvat, string custadd, string custmobile, string suser, string snotes, Nullable<int> ccid, string ccname, Nullable<decimal> netbvat, Nullable<decimal> vatvalue, Nullable<decimal> netavat, Nullable<decimal> restvalue, string invdoc, Nullable<int> smanid, string smanname, string fyear, Nullable<byte> invchk, ObjectParameter errorid, ObjectParameter errormsg, ObjectParameter time, ObjectParameter id, Nullable<int> sinvstatusid, string sinvstatusname)
        {
            var sinvdocnoParameter = sinvdocno != null ?
                new ObjectParameter("sinvdocno", sinvdocno) :
                new ObjectParameter("sinvdocno", typeof(string));
    
            var sinvdataParameter = sinvdata.HasValue ?
                new ObjectParameter("sinvdata", sinvdata) :
                new ObjectParameter("sinvdata", typeof(System.DateTime));
    
            var sinvpayParameter = sinvpay.HasValue ?
                new ObjectParameter("sinvpay", sinvpay) :
                new ObjectParameter("sinvpay", typeof(int));
    
            var sinvpaynameParameter = sinvpayname != null ?
                new ObjectParameter("sinvpayname", sinvpayname) :
                new ObjectParameter("sinvpayname", typeof(string));
    
            var branchidParameter = branchid.HasValue ?
                new ObjectParameter("branchid", branchid) :
                new ObjectParameter("branchid", typeof(int));
    
            var branchnameParameter = branchname != null ?
                new ObjectParameter("branchname", branchname) :
                new ObjectParameter("branchname", typeof(string));
    
            var custidParameter = custid.HasValue ?
                new ObjectParameter("custid", custid) :
                new ObjectParameter("custid", typeof(int));
    
            var custnameParameter = custname != null ?
                new ObjectParameter("custname", custname) :
                new ObjectParameter("custname", typeof(string));
    
            var custvatParameter = custvat != null ?
                new ObjectParameter("custvat", custvat) :
                new ObjectParameter("custvat", typeof(string));
    
            var custaddParameter = custadd != null ?
                new ObjectParameter("custadd", custadd) :
                new ObjectParameter("custadd", typeof(string));
    
            var custmobileParameter = custmobile != null ?
                new ObjectParameter("custmobile", custmobile) :
                new ObjectParameter("custmobile", typeof(string));
    
            var suserParameter = suser != null ?
                new ObjectParameter("suser", suser) :
                new ObjectParameter("suser", typeof(string));
    
            var snotesParameter = snotes != null ?
                new ObjectParameter("snotes", snotes) :
                new ObjectParameter("snotes", typeof(string));
    
            var ccidParameter = ccid.HasValue ?
                new ObjectParameter("ccid", ccid) :
                new ObjectParameter("ccid", typeof(int));
    
            var ccnameParameter = ccname != null ?
                new ObjectParameter("ccname", ccname) :
                new ObjectParameter("ccname", typeof(string));
    
            var netbvatParameter = netbvat.HasValue ?
                new ObjectParameter("netbvat", netbvat) :
                new ObjectParameter("netbvat", typeof(decimal));
    
            var vatvalueParameter = vatvalue.HasValue ?
                new ObjectParameter("vatvalue", vatvalue) :
                new ObjectParameter("vatvalue", typeof(decimal));
    
            var netavatParameter = netavat.HasValue ?
                new ObjectParameter("netavat", netavat) :
                new ObjectParameter("netavat", typeof(decimal));
    
            var restvalueParameter = restvalue.HasValue ?
                new ObjectParameter("restvalue", restvalue) :
                new ObjectParameter("restvalue", typeof(decimal));
    
            var invdocParameter = invdoc != null ?
                new ObjectParameter("invdoc", invdoc) :
                new ObjectParameter("invdoc", typeof(string));
    
            var smanidParameter = smanid.HasValue ?
                new ObjectParameter("smanid", smanid) :
                new ObjectParameter("smanid", typeof(int));
    
            var smannameParameter = smanname != null ?
                new ObjectParameter("smanname", smanname) :
                new ObjectParameter("smanname", typeof(string));
    
            var fyearParameter = fyear != null ?
                new ObjectParameter("fyear", fyear) :
                new ObjectParameter("fyear", typeof(string));
    
            var invchkParameter = invchk.HasValue ?
                new ObjectParameter("invchk", invchk) :
                new ObjectParameter("invchk", typeof(byte));
    
            var sinvstatusidParameter = sinvstatusid.HasValue ?
                new ObjectParameter("sinvstatusid", sinvstatusid) :
                new ObjectParameter("sinvstatusid", typeof(int));
    
            var sinvstatusnameParameter = sinvstatusname != null ?
                new ObjectParameter("sinvstatusname", sinvstatusname) :
                new ObjectParameter("sinvstatusname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("s_inv_ins", sinvnomax, sinvdocnoParameter, sinvdataParameter, sinvpayParameter, sinvpaynameParameter, branchidParameter, branchnameParameter, custidParameter, custnameParameter, custvatParameter, custaddParameter, custmobileParameter, suserParameter, snotesParameter, ccidParameter, ccnameParameter, netbvatParameter, vatvalueParameter, netavatParameter, restvalueParameter, invdocParameter, smanidParameter, smannameParameter, fyearParameter, invchkParameter, errorid, errormsg, time, id, sinvstatusidParameter, sinvstatusnameParameter);
        }
    
        public virtual ObjectResult<s_inv_sel_Result> s_inv_sel()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<s_inv_sel_Result>("s_inv_sel");
        }
    
        public virtual ObjectResult<s_inv_sel_id_Result> s_inv_sel_id(Nullable<int> sinvid)
        {
            var sinvidParameter = sinvid.HasValue ?
                new ObjectParameter("sinvid", sinvid) :
                new ObjectParameter("sinvid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<s_inv_sel_id_Result>("s_inv_sel_id", sinvidParameter);
        }
    
        public virtual ObjectResult<s_inv_sel_search_Result> s_inv_sel_search(string userid, string searchval)
        {
            var useridParameter = userid != null ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(string));
    
            var searchvalParameter = searchval != null ?
                new ObjectParameter("searchval", searchval) :
                new ObjectParameter("searchval", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<s_inv_sel_search_Result>("s_inv_sel_search", useridParameter, searchvalParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> s_inv_sel_sinvid(string sinvno)
        {
            var sinvnoParameter = sinvno != null ?
                new ObjectParameter("sinvno", sinvno) :
                new ObjectParameter("sinvno", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("s_inv_sel_sinvid", sinvnoParameter);
        }
    
        public virtual int s_inv_upd(Nullable<int> sinvid, string sinvno, string sinvdocno, Nullable<System.DateTime> sinvdata, Nullable<int> sinvpay, string sinvpayname, Nullable<int> custid, string custname, string custvat, string custmobile, string custadd, string suser, string snotes, Nullable<int> ccid, string ccname, Nullable<decimal> netbvat, Nullable<decimal> vatvalue, Nullable<decimal> netavat, Nullable<decimal> restvalue, string invdoc, Nullable<int> smanid, string smanname, string fyear, ObjectParameter errorid, ObjectParameter errormsg, Nullable<int> sinvstatusid, string sinvstatusname)
        {
            var sinvidParameter = sinvid.HasValue ?
                new ObjectParameter("sinvid", sinvid) :
                new ObjectParameter("sinvid", typeof(int));
    
            var sinvnoParameter = sinvno != null ?
                new ObjectParameter("sinvno", sinvno) :
                new ObjectParameter("sinvno", typeof(string));
    
            var sinvdocnoParameter = sinvdocno != null ?
                new ObjectParameter("sinvdocno", sinvdocno) :
                new ObjectParameter("sinvdocno", typeof(string));
    
            var sinvdataParameter = sinvdata.HasValue ?
                new ObjectParameter("sinvdata", sinvdata) :
                new ObjectParameter("sinvdata", typeof(System.DateTime));
    
            var sinvpayParameter = sinvpay.HasValue ?
                new ObjectParameter("sinvpay", sinvpay) :
                new ObjectParameter("sinvpay", typeof(int));
    
            var sinvpaynameParameter = sinvpayname != null ?
                new ObjectParameter("sinvpayname", sinvpayname) :
                new ObjectParameter("sinvpayname", typeof(string));
    
            var custidParameter = custid.HasValue ?
                new ObjectParameter("custid", custid) :
                new ObjectParameter("custid", typeof(int));
    
            var custnameParameter = custname != null ?
                new ObjectParameter("custname", custname) :
                new ObjectParameter("custname", typeof(string));
    
            var custvatParameter = custvat != null ?
                new ObjectParameter("custvat", custvat) :
                new ObjectParameter("custvat", typeof(string));
    
            var custmobileParameter = custmobile != null ?
                new ObjectParameter("custmobile", custmobile) :
                new ObjectParameter("custmobile", typeof(string));
    
            var custaddParameter = custadd != null ?
                new ObjectParameter("custadd", custadd) :
                new ObjectParameter("custadd", typeof(string));
    
            var suserParameter = suser != null ?
                new ObjectParameter("suser", suser) :
                new ObjectParameter("suser", typeof(string));
    
            var snotesParameter = snotes != null ?
                new ObjectParameter("snotes", snotes) :
                new ObjectParameter("snotes", typeof(string));
    
            var ccidParameter = ccid.HasValue ?
                new ObjectParameter("ccid", ccid) :
                new ObjectParameter("ccid", typeof(int));
    
            var ccnameParameter = ccname != null ?
                new ObjectParameter("ccname", ccname) :
                new ObjectParameter("ccname", typeof(string));
    
            var netbvatParameter = netbvat.HasValue ?
                new ObjectParameter("netbvat", netbvat) :
                new ObjectParameter("netbvat", typeof(decimal));
    
            var vatvalueParameter = vatvalue.HasValue ?
                new ObjectParameter("vatvalue", vatvalue) :
                new ObjectParameter("vatvalue", typeof(decimal));
    
            var netavatParameter = netavat.HasValue ?
                new ObjectParameter("netavat", netavat) :
                new ObjectParameter("netavat", typeof(decimal));
    
            var restvalueParameter = restvalue.HasValue ?
                new ObjectParameter("restvalue", restvalue) :
                new ObjectParameter("restvalue", typeof(decimal));
    
            var invdocParameter = invdoc != null ?
                new ObjectParameter("invdoc", invdoc) :
                new ObjectParameter("invdoc", typeof(string));
    
            var smanidParameter = smanid.HasValue ?
                new ObjectParameter("smanid", smanid) :
                new ObjectParameter("smanid", typeof(int));
    
            var smannameParameter = smanname != null ?
                new ObjectParameter("smanname", smanname) :
                new ObjectParameter("smanname", typeof(string));
    
            var fyearParameter = fyear != null ?
                new ObjectParameter("fyear", fyear) :
                new ObjectParameter("fyear", typeof(string));
    
            var sinvstatusidParameter = sinvstatusid.HasValue ?
                new ObjectParameter("sinvstatusid", sinvstatusid) :
                new ObjectParameter("sinvstatusid", typeof(int));
    
            var sinvstatusnameParameter = sinvstatusname != null ?
                new ObjectParameter("sinvstatusname", sinvstatusname) :
                new ObjectParameter("sinvstatusname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("s_inv_upd", sinvidParameter, sinvnoParameter, sinvdocnoParameter, sinvdataParameter, sinvpayParameter, sinvpaynameParameter, custidParameter, custnameParameter, custvatParameter, custmobileParameter, custaddParameter, suserParameter, snotesParameter, ccidParameter, ccnameParameter, netbvatParameter, vatvalueParameter, netavatParameter, restvalueParameter, invdocParameter, smanidParameter, smannameParameter, fyearParameter, errorid, errormsg, sinvstatusidParameter, sinvstatusnameParameter);
        }
    
        public virtual int s_invdtls_del(Nullable<int> invdtlid, ObjectParameter errorid, ObjectParameter errormsg, ObjectParameter netval, ObjectParameter vatval, ObjectParameter netbvat, ObjectParameter payvalue)
        {
            var invdtlidParameter = invdtlid.HasValue ?
                new ObjectParameter("invdtlid", invdtlid) :
                new ObjectParameter("invdtlid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("s_invdtls_del", invdtlidParameter, errorid, errormsg, netval, vatval, netbvat, payvalue);
        }
    
        public virtual int s_invdtls_ins(Nullable<int> sinvid, ObjectParameter invdtlid, Nullable<int> itemid, Nullable<int> unitid, Nullable<decimal> qty, Nullable<decimal> price, Nullable<decimal> value, Nullable<decimal> discp, Nullable<decimal> discvalue, Nullable<decimal> netvalue, Nullable<decimal> vatvalue, string itemnotes, Nullable<decimal> factor, string fyear, ObjectParameter errorid, ObjectParameter errormsg)
        {
            var sinvidParameter = sinvid.HasValue ?
                new ObjectParameter("sinvid", sinvid) :
                new ObjectParameter("sinvid", typeof(int));
    
            var itemidParameter = itemid.HasValue ?
                new ObjectParameter("itemid", itemid) :
                new ObjectParameter("itemid", typeof(int));
    
            var unitidParameter = unitid.HasValue ?
                new ObjectParameter("unitid", unitid) :
                new ObjectParameter("unitid", typeof(int));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("qty", qty) :
                new ObjectParameter("qty", typeof(decimal));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(decimal));
    
            var valueParameter = value.HasValue ?
                new ObjectParameter("value", value) :
                new ObjectParameter("value", typeof(decimal));
    
            var discpParameter = discp.HasValue ?
                new ObjectParameter("discp", discp) :
                new ObjectParameter("discp", typeof(decimal));
    
            var discvalueParameter = discvalue.HasValue ?
                new ObjectParameter("discvalue", discvalue) :
                new ObjectParameter("discvalue", typeof(decimal));
    
            var netvalueParameter = netvalue.HasValue ?
                new ObjectParameter("netvalue", netvalue) :
                new ObjectParameter("netvalue", typeof(decimal));
    
            var vatvalueParameter = vatvalue.HasValue ?
                new ObjectParameter("vatvalue", vatvalue) :
                new ObjectParameter("vatvalue", typeof(decimal));
    
            var itemnotesParameter = itemnotes != null ?
                new ObjectParameter("itemnotes", itemnotes) :
                new ObjectParameter("itemnotes", typeof(string));
    
            var factorParameter = factor.HasValue ?
                new ObjectParameter("factor", factor) :
                new ObjectParameter("factor", typeof(decimal));
    
            var fyearParameter = fyear != null ?
                new ObjectParameter("fyear", fyear) :
                new ObjectParameter("fyear", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("s_invdtls_ins", sinvidParameter, invdtlid, itemidParameter, unitidParameter, qtyParameter, priceParameter, valueParameter, discpParameter, discvalueParameter, netvalueParameter, vatvalueParameter, itemnotesParameter, factorParameter, fyearParameter, errorid, errormsg);
        }
    
        public virtual ObjectResult<s_invdtls_sel_Result> s_invdtls_sel(Nullable<int> sinvid)
        {
            var sinvidParameter = sinvid.HasValue ?
                new ObjectParameter("sinvid", sinvid) :
                new ObjectParameter("sinvid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<s_invdtls_sel_Result>("s_invdtls_sel", sinvidParameter);
        }
    
        public virtual int s_invdtls_upd(ObjectParameter invdtlid, Nullable<int> sinvid, Nullable<int> itemid, Nullable<int> unitid, Nullable<decimal> qty, Nullable<decimal> price, Nullable<decimal> value, Nullable<decimal> factor, Nullable<decimal> discp, Nullable<decimal> discvalue, Nullable<decimal> netvalue, Nullable<decimal> vatvalue, string itemnotes, string fyear, ObjectParameter errorid, ObjectParameter errormsg)
        {
            var sinvidParameter = sinvid.HasValue ?
                new ObjectParameter("sinvid", sinvid) :
                new ObjectParameter("sinvid", typeof(int));
    
            var itemidParameter = itemid.HasValue ?
                new ObjectParameter("itemid", itemid) :
                new ObjectParameter("itemid", typeof(int));
    
            var unitidParameter = unitid.HasValue ?
                new ObjectParameter("unitid", unitid) :
                new ObjectParameter("unitid", typeof(int));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("qty", qty) :
                new ObjectParameter("qty", typeof(decimal));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(decimal));
    
            var valueParameter = value.HasValue ?
                new ObjectParameter("value", value) :
                new ObjectParameter("value", typeof(decimal));
    
            var factorParameter = factor.HasValue ?
                new ObjectParameter("factor", factor) :
                new ObjectParameter("factor", typeof(decimal));
    
            var discpParameter = discp.HasValue ?
                new ObjectParameter("discp", discp) :
                new ObjectParameter("discp", typeof(decimal));
    
            var discvalueParameter = discvalue.HasValue ?
                new ObjectParameter("discvalue", discvalue) :
                new ObjectParameter("discvalue", typeof(decimal));
    
            var netvalueParameter = netvalue.HasValue ?
                new ObjectParameter("netvalue", netvalue) :
                new ObjectParameter("netvalue", typeof(decimal));
    
            var vatvalueParameter = vatvalue.HasValue ?
                new ObjectParameter("vatvalue", vatvalue) :
                new ObjectParameter("vatvalue", typeof(decimal));
    
            var itemnotesParameter = itemnotes != null ?
                new ObjectParameter("itemnotes", itemnotes) :
                new ObjectParameter("itemnotes", typeof(string));
    
            var fyearParameter = fyear != null ?
                new ObjectParameter("fyear", fyear) :
                new ObjectParameter("fyear", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("s_invdtls_upd", invdtlid, sinvidParameter, itemidParameter, unitidParameter, qtyParameter, priceParameter, valueParameter, factorParameter, discpParameter, discvalueParameter, netvalueParameter, vatvalueParameter, itemnotesParameter, fyearParameter, errorid, errormsg);
        }
    
        public virtual ObjectResult<s_sman_sel_Result> s_sman_sel()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<s_sman_sel_Result>("s_sman_sel");
        }
    
        public virtual int st_items_del(Nullable<int> itemid, ObjectParameter errorid, ObjectParameter errormsg)
        {
            var itemidParameter = itemid.HasValue ?
                new ObjectParameter("itemid", itemid) :
                new ObjectParameter("itemid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("st_items_del", itemidParameter, errorid, errormsg);
        }
    
        public virtual int st_items_ins(ObjectParameter id, ObjectParameter itemcode, string itemcode2, string itemcode3, string itembarcode, string itembarcode2, string itemname, string itemename, string itemdesc, Nullable<int> unitid, Nullable<int> groupid, Nullable<int> itemtypeid, Nullable<int> suppid, Nullable<decimal> minqty, Nullable<decimal> maxqty, Nullable<byte> itemstop, Nullable<decimal> pprice, Nullable<decimal> cprice, Nullable<decimal> sprice, Nullable<decimal> vat, Nullable<decimal> vprice, Nullable<decimal> fprice, string itempic, string itemfield1, string itemfield2, string itemcatname1, Nullable<int> itemcat1, Nullable<int> itemcat2, string itemcatname2, ObjectParameter errorid, ObjectParameter errormsg)
        {
            var itemcode2Parameter = itemcode2 != null ?
                new ObjectParameter("itemcode2", itemcode2) :
                new ObjectParameter("itemcode2", typeof(string));
    
            var itemcode3Parameter = itemcode3 != null ?
                new ObjectParameter("itemcode3", itemcode3) :
                new ObjectParameter("itemcode3", typeof(string));
    
            var itembarcodeParameter = itembarcode != null ?
                new ObjectParameter("itembarcode", itembarcode) :
                new ObjectParameter("itembarcode", typeof(string));
    
            var itembarcode2Parameter = itembarcode2 != null ?
                new ObjectParameter("itembarcode2", itembarcode2) :
                new ObjectParameter("itembarcode2", typeof(string));
    
            var itemnameParameter = itemname != null ?
                new ObjectParameter("itemname", itemname) :
                new ObjectParameter("itemname", typeof(string));
    
            var itemenameParameter = itemename != null ?
                new ObjectParameter("itemename", itemename) :
                new ObjectParameter("itemename", typeof(string));
    
            var itemdescParameter = itemdesc != null ?
                new ObjectParameter("itemdesc", itemdesc) :
                new ObjectParameter("itemdesc", typeof(string));
    
            var unitidParameter = unitid.HasValue ?
                new ObjectParameter("unitid", unitid) :
                new ObjectParameter("unitid", typeof(int));
    
            var groupidParameter = groupid.HasValue ?
                new ObjectParameter("groupid", groupid) :
                new ObjectParameter("groupid", typeof(int));
    
            var itemtypeidParameter = itemtypeid.HasValue ?
                new ObjectParameter("itemtypeid", itemtypeid) :
                new ObjectParameter("itemtypeid", typeof(int));
    
            var suppidParameter = suppid.HasValue ?
                new ObjectParameter("suppid", suppid) :
                new ObjectParameter("suppid", typeof(int));
    
            var minqtyParameter = minqty.HasValue ?
                new ObjectParameter("minqty", minqty) :
                new ObjectParameter("minqty", typeof(decimal));
    
            var maxqtyParameter = maxqty.HasValue ?
                new ObjectParameter("maxqty", maxqty) :
                new ObjectParameter("maxqty", typeof(decimal));
    
            var itemstopParameter = itemstop.HasValue ?
                new ObjectParameter("itemstop", itemstop) :
                new ObjectParameter("itemstop", typeof(byte));
    
            var ppriceParameter = pprice.HasValue ?
                new ObjectParameter("pprice", pprice) :
                new ObjectParameter("pprice", typeof(decimal));
    
            var cpriceParameter = cprice.HasValue ?
                new ObjectParameter("cprice", cprice) :
                new ObjectParameter("cprice", typeof(decimal));
    
            var spriceParameter = sprice.HasValue ?
                new ObjectParameter("sprice", sprice) :
                new ObjectParameter("sprice", typeof(decimal));
    
            var vatParameter = vat.HasValue ?
                new ObjectParameter("vat", vat) :
                new ObjectParameter("vat", typeof(decimal));
    
            var vpriceParameter = vprice.HasValue ?
                new ObjectParameter("vprice", vprice) :
                new ObjectParameter("vprice", typeof(decimal));
    
            var fpriceParameter = fprice.HasValue ?
                new ObjectParameter("fprice", fprice) :
                new ObjectParameter("fprice", typeof(decimal));
    
            var itempicParameter = itempic != null ?
                new ObjectParameter("itempic", itempic) :
                new ObjectParameter("itempic", typeof(string));
    
            var itemfield1Parameter = itemfield1 != null ?
                new ObjectParameter("itemfield1", itemfield1) :
                new ObjectParameter("itemfield1", typeof(string));
    
            var itemfield2Parameter = itemfield2 != null ?
                new ObjectParameter("itemfield2", itemfield2) :
                new ObjectParameter("itemfield2", typeof(string));
    
            var itemcatname1Parameter = itemcatname1 != null ?
                new ObjectParameter("itemcatname1", itemcatname1) :
                new ObjectParameter("itemcatname1", typeof(string));
    
            var itemcat1Parameter = itemcat1.HasValue ?
                new ObjectParameter("itemcat1", itemcat1) :
                new ObjectParameter("itemcat1", typeof(int));
    
            var itemcat2Parameter = itemcat2.HasValue ?
                new ObjectParameter("itemcat2", itemcat2) :
                new ObjectParameter("itemcat2", typeof(int));
    
            var itemcatname2Parameter = itemcatname2 != null ?
                new ObjectParameter("itemcatname2", itemcatname2) :
                new ObjectParameter("itemcatname2", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("st_items_ins", id, itemcode, itemcode2Parameter, itemcode3Parameter, itembarcodeParameter, itembarcode2Parameter, itemnameParameter, itemenameParameter, itemdescParameter, unitidParameter, groupidParameter, itemtypeidParameter, suppidParameter, minqtyParameter, maxqtyParameter, itemstopParameter, ppriceParameter, cpriceParameter, spriceParameter, vatParameter, vpriceParameter, fpriceParameter, itempicParameter, itemfield1Parameter, itemfield2Parameter, itemcatname1Parameter, itemcat1Parameter, itemcat2Parameter, itemcatname2Parameter, errorid, errormsg);
        }
    
        public virtual ObjectResult<st_items_sel_Result> st_items_sel()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<st_items_sel_Result>("st_items_sel");
        }
    
        public virtual ObjectResult<st_items_sel_item_code_Result> st_items_sel_item_code(string itemcode)
        {
            var itemcodeParameter = itemcode != null ?
                new ObjectParameter("itemcode", itemcode) :
                new ObjectParameter("itemcode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<st_items_sel_item_code_Result>("st_items_sel_item_code", itemcodeParameter);
        }
    
        public virtual ObjectResult<st_items_sel_itemid_Result> st_items_sel_itemid(Nullable<int> itemid)
        {
            var itemidParameter = itemid.HasValue ?
                new ObjectParameter("itemid", itemid) :
                new ObjectParameter("itemid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<st_items_sel_itemid_Result>("st_items_sel_itemid", itemidParameter);
        }
    
        public virtual ObjectResult<st_items_sel_search_Result> st_items_sel_search(string itemid, string item)
        {
            var itemidParameter = itemid != null ?
                new ObjectParameter("itemid", itemid) :
                new ObjectParameter("itemid", typeof(string));
    
            var itemParameter = item != null ?
                new ObjectParameter("item", item) :
                new ObjectParameter("item", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<st_items_sel_search_Result>("st_items_sel_search", itemidParameter, itemParameter);
        }
    
        public virtual int st_items_upd(Nullable<int> itemid, string itemcode, string itemcode2, string itemcode3, string itembarcode, string itembarcode2, string itemname, string itemename, string itemdesc, Nullable<int> unitid, Nullable<int> groupid, Nullable<int> itemtypeid, Nullable<int> suppid, Nullable<decimal> minqty, Nullable<decimal> maxqty, Nullable<byte> itemstop, Nullable<decimal> pprice, Nullable<decimal> cprice, Nullable<decimal> sprice, Nullable<decimal> vat, Nullable<decimal> vprice, Nullable<decimal> fprice, string itempic, string itemfield1, string itemfield2, string itemcatname1, Nullable<int> itemcat1, Nullable<int> itemcat2, string itemcatname2, ObjectParameter errorid, ObjectParameter errormsg)
        {
            var itemidParameter = itemid.HasValue ?
                new ObjectParameter("itemid", itemid) :
                new ObjectParameter("itemid", typeof(int));
    
            var itemcodeParameter = itemcode != null ?
                new ObjectParameter("itemcode", itemcode) :
                new ObjectParameter("itemcode", typeof(string));
    
            var itemcode2Parameter = itemcode2 != null ?
                new ObjectParameter("itemcode2", itemcode2) :
                new ObjectParameter("itemcode2", typeof(string));
    
            var itemcode3Parameter = itemcode3 != null ?
                new ObjectParameter("itemcode3", itemcode3) :
                new ObjectParameter("itemcode3", typeof(string));
    
            var itembarcodeParameter = itembarcode != null ?
                new ObjectParameter("itembarcode", itembarcode) :
                new ObjectParameter("itembarcode", typeof(string));
    
            var itembarcode2Parameter = itembarcode2 != null ?
                new ObjectParameter("itembarcode2", itembarcode2) :
                new ObjectParameter("itembarcode2", typeof(string));
    
            var itemnameParameter = itemname != null ?
                new ObjectParameter("itemname", itemname) :
                new ObjectParameter("itemname", typeof(string));
    
            var itemenameParameter = itemename != null ?
                new ObjectParameter("itemename", itemename) :
                new ObjectParameter("itemename", typeof(string));
    
            var itemdescParameter = itemdesc != null ?
                new ObjectParameter("itemdesc", itemdesc) :
                new ObjectParameter("itemdesc", typeof(string));
    
            var unitidParameter = unitid.HasValue ?
                new ObjectParameter("unitid", unitid) :
                new ObjectParameter("unitid", typeof(int));
    
            var groupidParameter = groupid.HasValue ?
                new ObjectParameter("groupid", groupid) :
                new ObjectParameter("groupid", typeof(int));
    
            var itemtypeidParameter = itemtypeid.HasValue ?
                new ObjectParameter("itemtypeid", itemtypeid) :
                new ObjectParameter("itemtypeid", typeof(int));
    
            var suppidParameter = suppid.HasValue ?
                new ObjectParameter("suppid", suppid) :
                new ObjectParameter("suppid", typeof(int));
    
            var minqtyParameter = minqty.HasValue ?
                new ObjectParameter("minqty", minqty) :
                new ObjectParameter("minqty", typeof(decimal));
    
            var maxqtyParameter = maxqty.HasValue ?
                new ObjectParameter("maxqty", maxqty) :
                new ObjectParameter("maxqty", typeof(decimal));
    
            var itemstopParameter = itemstop.HasValue ?
                new ObjectParameter("itemstop", itemstop) :
                new ObjectParameter("itemstop", typeof(byte));
    
            var ppriceParameter = pprice.HasValue ?
                new ObjectParameter("pprice", pprice) :
                new ObjectParameter("pprice", typeof(decimal));
    
            var cpriceParameter = cprice.HasValue ?
                new ObjectParameter("cprice", cprice) :
                new ObjectParameter("cprice", typeof(decimal));
    
            var spriceParameter = sprice.HasValue ?
                new ObjectParameter("sprice", sprice) :
                new ObjectParameter("sprice", typeof(decimal));
    
            var vatParameter = vat.HasValue ?
                new ObjectParameter("vat", vat) :
                new ObjectParameter("vat", typeof(decimal));
    
            var vpriceParameter = vprice.HasValue ?
                new ObjectParameter("vprice", vprice) :
                new ObjectParameter("vprice", typeof(decimal));
    
            var fpriceParameter = fprice.HasValue ?
                new ObjectParameter("fprice", fprice) :
                new ObjectParameter("fprice", typeof(decimal));
    
            var itempicParameter = itempic != null ?
                new ObjectParameter("itempic", itempic) :
                new ObjectParameter("itempic", typeof(string));
    
            var itemfield1Parameter = itemfield1 != null ?
                new ObjectParameter("itemfield1", itemfield1) :
                new ObjectParameter("itemfield1", typeof(string));
    
            var itemfield2Parameter = itemfield2 != null ?
                new ObjectParameter("itemfield2", itemfield2) :
                new ObjectParameter("itemfield2", typeof(string));
    
            var itemcatname1Parameter = itemcatname1 != null ?
                new ObjectParameter("itemcatname1", itemcatname1) :
                new ObjectParameter("itemcatname1", typeof(string));
    
            var itemcat1Parameter = itemcat1.HasValue ?
                new ObjectParameter("itemcat1", itemcat1) :
                new ObjectParameter("itemcat1", typeof(int));
    
            var itemcat2Parameter = itemcat2.HasValue ?
                new ObjectParameter("itemcat2", itemcat2) :
                new ObjectParameter("itemcat2", typeof(int));
    
            var itemcatname2Parameter = itemcatname2 != null ?
                new ObjectParameter("itemcatname2", itemcatname2) :
                new ObjectParameter("itemcatname2", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("st_items_upd", itemidParameter, itemcodeParameter, itemcode2Parameter, itemcode3Parameter, itembarcodeParameter, itembarcode2Parameter, itemnameParameter, itemenameParameter, itemdescParameter, unitidParameter, groupidParameter, itemtypeidParameter, suppidParameter, minqtyParameter, maxqtyParameter, itemstopParameter, ppriceParameter, cpriceParameter, spriceParameter, vatParameter, vpriceParameter, fpriceParameter, itempicParameter, itemfield1Parameter, itemfield2Parameter, itemcatname1Parameter, itemcat1Parameter, itemcat2Parameter, itemcatname2Parameter, errorid, errormsg);
        }
    
        public virtual int stages_sel()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("stages_sel");
        }
    
        public virtual int sys_branch_del(Nullable<int> branchid, ObjectParameter errorid, ObjectParameter errormsg)
        {
            var branchidParameter = branchid.HasValue ?
                new ObjectParameter("branchid", branchid) :
                new ObjectParameter("branchid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sys_branch_del", branchidParameter, errorid, errormsg);
        }
    
        public virtual int sys_branch_ins(string branchname, string branchtel, string branchadd, string branchnotes, ObjectParameter errorid, ObjectParameter errormsg)
        {
            var branchnameParameter = branchname != null ?
                new ObjectParameter("branchname", branchname) :
                new ObjectParameter("branchname", typeof(string));
    
            var branchtelParameter = branchtel != null ?
                new ObjectParameter("branchtel", branchtel) :
                new ObjectParameter("branchtel", typeof(string));
    
            var branchaddParameter = branchadd != null ?
                new ObjectParameter("branchadd", branchadd) :
                new ObjectParameter("branchadd", typeof(string));
    
            var branchnotesParameter = branchnotes != null ?
                new ObjectParameter("branchnotes", branchnotes) :
                new ObjectParameter("branchnotes", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sys_branch_ins", branchnameParameter, branchtelParameter, branchaddParameter, branchnotesParameter, errorid, errormsg);
        }
    
        public virtual ObjectResult<sys_branch_sel_Result> sys_branch_sel(string userid)
        {
            var useridParameter = userid != null ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sys_branch_sel_Result>("sys_branch_sel", useridParameter);
        }
    
        public virtual int sys_branch_upd(Nullable<int> branchid, string branchname, string branchtel, string branchadd, string branchnotes, ObjectParameter errorid, ObjectParameter errormsg)
        {
            var branchidParameter = branchid.HasValue ?
                new ObjectParameter("branchid", branchid) :
                new ObjectParameter("branchid", typeof(int));
    
            var branchnameParameter = branchname != null ?
                new ObjectParameter("branchname", branchname) :
                new ObjectParameter("branchname", typeof(string));
    
            var branchtelParameter = branchtel != null ?
                new ObjectParameter("branchtel", branchtel) :
                new ObjectParameter("branchtel", typeof(string));
    
            var branchaddParameter = branchadd != null ?
                new ObjectParameter("branchadd", branchadd) :
                new ObjectParameter("branchadd", typeof(string));
    
            var branchnotesParameter = branchnotes != null ?
                new ObjectParameter("branchnotes", branchnotes) :
                new ObjectParameter("branchnotes", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sys_branch_upd", branchidParameter, branchnameParameter, branchtelParameter, branchaddParameter, branchnotesParameter, errorid, errormsg);
        }
    
        public virtual ObjectResult<sys_company_sel_Result> sys_company_sel()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sys_company_sel_Result>("sys_company_sel");
        }
    
        public virtual int sys_company_upd(string compname, string compact, string compyear, string complegal, string comptel, string compmob, string compweb, string compemail, string compadd, string compmanager, string compvatno, string compnotes, string complogo, ObjectParameter errorid, ObjectParameter errormsg)
        {
            var compnameParameter = compname != null ?
                new ObjectParameter("compname", compname) :
                new ObjectParameter("compname", typeof(string));
    
            var compactParameter = compact != null ?
                new ObjectParameter("compact", compact) :
                new ObjectParameter("compact", typeof(string));
    
            var compyearParameter = compyear != null ?
                new ObjectParameter("compyear", compyear) :
                new ObjectParameter("compyear", typeof(string));
    
            var complegalParameter = complegal != null ?
                new ObjectParameter("complegal", complegal) :
                new ObjectParameter("complegal", typeof(string));
    
            var comptelParameter = comptel != null ?
                new ObjectParameter("comptel", comptel) :
                new ObjectParameter("comptel", typeof(string));
    
            var compmobParameter = compmob != null ?
                new ObjectParameter("compmob", compmob) :
                new ObjectParameter("compmob", typeof(string));
    
            var compwebParameter = compweb != null ?
                new ObjectParameter("compweb", compweb) :
                new ObjectParameter("compweb", typeof(string));
    
            var compemailParameter = compemail != null ?
                new ObjectParameter("compemail", compemail) :
                new ObjectParameter("compemail", typeof(string));
    
            var compaddParameter = compadd != null ?
                new ObjectParameter("compadd", compadd) :
                new ObjectParameter("compadd", typeof(string));
    
            var compmanagerParameter = compmanager != null ?
                new ObjectParameter("compmanager", compmanager) :
                new ObjectParameter("compmanager", typeof(string));
    
            var compvatnoParameter = compvatno != null ?
                new ObjectParameter("compvatno", compvatno) :
                new ObjectParameter("compvatno", typeof(string));
    
            var compnotesParameter = compnotes != null ?
                new ObjectParameter("compnotes", compnotes) :
                new ObjectParameter("compnotes", typeof(string));
    
            var complogoParameter = complogo != null ?
                new ObjectParameter("complogo", complogo) :
                new ObjectParameter("complogo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sys_company_upd", compnameParameter, compactParameter, compyearParameter, complegalParameter, comptelParameter, compmobParameter, compwebParameter, compemailParameter, compaddParameter, compmanagerParameter, compvatnoParameter, compnotesParameter, complogoParameter, errorid, errormsg);
        }
    
        public virtual int sys_costcenter_del(Nullable<int> ccid, ObjectParameter errorid, ObjectParameter errormsg)
        {
            var ccidParameter = ccid.HasValue ?
                new ObjectParameter("ccid", ccid) :
                new ObjectParameter("ccid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sys_costcenter_del", ccidParameter, errorid, errormsg);
        }
    
        public virtual int sys_costcenter_ins(string ccname, string ccnotes, ObjectParameter errorid, ObjectParameter errormsg)
        {
            var ccnameParameter = ccname != null ?
                new ObjectParameter("ccname", ccname) :
                new ObjectParameter("ccname", typeof(string));
    
            var ccnotesParameter = ccnotes != null ?
                new ObjectParameter("ccnotes", ccnotes) :
                new ObjectParameter("ccnotes", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sys_costcenter_ins", ccnameParameter, ccnotesParameter, errorid, errormsg);
        }
    
        public virtual ObjectResult<sys_costcenter_sel_Result> sys_costcenter_sel()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sys_costcenter_sel_Result>("sys_costcenter_sel");
        }
    
        public virtual int sys_costcenter_upd(Nullable<int> ccid, string ccname, string ccnotes, ObjectParameter errorid, ObjectParameter errormsg)
        {
            var ccidParameter = ccid.HasValue ?
                new ObjectParameter("ccid", ccid) :
                new ObjectParameter("ccid", typeof(int));
    
            var ccnameParameter = ccname != null ?
                new ObjectParameter("ccname", ccname) :
                new ObjectParameter("ccname", typeof(string));
    
            var ccnotesParameter = ccnotes != null ?
                new ObjectParameter("ccnotes", ccnotes) :
                new ObjectParameter("ccnotes", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sys_costcenter_upd", ccidParameter, ccnameParameter, ccnotesParameter, errorid, errormsg);
        }
    
        public virtual ObjectResult<sys_fillcomp_sel_Result> sys_fillcomp_sel(Nullable<int> compid, string table_name, string model, string userid)
        {
            var compidParameter = compid.HasValue ?
                new ObjectParameter("compid", compid) :
                new ObjectParameter("compid", typeof(int));
    
            var table_nameParameter = table_name != null ?
                new ObjectParameter("table_name", table_name) :
                new ObjectParameter("table_name", typeof(string));
    
            var modelParameter = model != null ?
                new ObjectParameter("model", model) :
                new ObjectParameter("model", typeof(string));
    
            var useridParameter = userid != null ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sys_fillcomp_sel_Result>("sys_fillcomp_sel", compidParameter, table_nameParameter, modelParameter, useridParameter);
        }
    
        public virtual int sys_paytype_del(Nullable<int> paytypeid, ObjectParameter errorid, ObjectParameter errormsg)
        {
            var paytypeidParameter = paytypeid.HasValue ?
                new ObjectParameter("paytypeid", paytypeid) :
                new ObjectParameter("paytypeid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sys_paytype_del", paytypeidParameter, errorid, errormsg);
        }
    
        public virtual ObjectResult<sys_paytype_sel_Result> sys_paytype_sel()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sys_paytype_sel_Result>("sys_paytype_sel");
        }
    
        public virtual int hr_vactions_del(Nullable<int> vid, ObjectParameter errorid, ObjectParameter errormsg)
        {
            var vidParameter = vid.HasValue ?
                new ObjectParameter("vid", vid) :
                new ObjectParameter("vid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("hr_vactions_del", vidParameter, errorid, errormsg);
        }
    
        public virtual int hr_vactions_ins(ObjectParameter vnomax, Nullable<System.DateTime> vdate, Nullable<int> vnature, string vnaturenmae, Nullable<int> vapp, string vappname, Nullable<int> vnameid, string vname, Nullable<int> empid, string empname, Nullable<System.DateTime> vfromd, Nullable<System.DateTime> vtodate, Nullable<int> vdays, string vuser, string vnotes, string fyear, ObjectParameter errorid, ObjectParameter errormsg, ObjectParameter id)
        {
            var vdateParameter = vdate.HasValue ?
                new ObjectParameter("vdate", vdate) :
                new ObjectParameter("vdate", typeof(System.DateTime));
    
            var vnatureParameter = vnature.HasValue ?
                new ObjectParameter("vnature", vnature) :
                new ObjectParameter("vnature", typeof(int));
    
            var vnaturenmaeParameter = vnaturenmae != null ?
                new ObjectParameter("vnaturenmae", vnaturenmae) :
                new ObjectParameter("vnaturenmae", typeof(string));
    
            var vappParameter = vapp.HasValue ?
                new ObjectParameter("vapp", vapp) :
                new ObjectParameter("vapp", typeof(int));
    
            var vappnameParameter = vappname != null ?
                new ObjectParameter("vappname", vappname) :
                new ObjectParameter("vappname", typeof(string));
    
            var vnameidParameter = vnameid.HasValue ?
                new ObjectParameter("vnameid", vnameid) :
                new ObjectParameter("vnameid", typeof(int));
    
            var vnameParameter = vname != null ?
                new ObjectParameter("vname", vname) :
                new ObjectParameter("vname", typeof(string));
    
            var empidParameter = empid.HasValue ?
                new ObjectParameter("empid", empid) :
                new ObjectParameter("empid", typeof(int));
    
            var empnameParameter = empname != null ?
                new ObjectParameter("empname", empname) :
                new ObjectParameter("empname", typeof(string));
    
            var vfromdParameter = vfromd.HasValue ?
                new ObjectParameter("vfromd", vfromd) :
                new ObjectParameter("vfromd", typeof(System.DateTime));
    
            var vtodateParameter = vtodate.HasValue ?
                new ObjectParameter("vtodate", vtodate) :
                new ObjectParameter("vtodate", typeof(System.DateTime));
    
            var vdaysParameter = vdays.HasValue ?
                new ObjectParameter("vdays", vdays) :
                new ObjectParameter("vdays", typeof(int));
    
            var vuserParameter = vuser != null ?
                new ObjectParameter("vuser", vuser) :
                new ObjectParameter("vuser", typeof(string));
    
            var vnotesParameter = vnotes != null ?
                new ObjectParameter("vnotes", vnotes) :
                new ObjectParameter("vnotes", typeof(string));
    
            var fyearParameter = fyear != null ?
                new ObjectParameter("fyear", fyear) :
                new ObjectParameter("fyear", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("hr_vactions_ins", vnomax, vdateParameter, vnatureParameter, vnaturenmaeParameter, vappParameter, vappnameParameter, vnameidParameter, vnameParameter, empidParameter, empnameParameter, vfromdParameter, vtodateParameter, vdaysParameter, vuserParameter, vnotesParameter, fyearParameter, errorid, errormsg, id);
        }
    
        public virtual ObjectResult<hr_vactions_sel_search_Result> hr_vactions_sel_search(string searchval)
        {
            var searchvalParameter = searchval != null ?
                new ObjectParameter("searchval", searchval) :
                new ObjectParameter("searchval", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<hr_vactions_sel_search_Result>("hr_vactions_sel_search", searchvalParameter);
        }
    
        public virtual int hr_vactions_upd(Nullable<int> vid, Nullable<System.DateTime> vdate, Nullable<int> vnature, string vnaturenmae, Nullable<int> vapp, string vappname, Nullable<int> vnameid, string vname, Nullable<int> empid, string empname, Nullable<System.DateTime> vfromd, Nullable<System.DateTime> vtodate, Nullable<int> vdays, string vnotes, string fyear, ObjectParameter errorid, ObjectParameter errormsg)
        {
            var vidParameter = vid.HasValue ?
                new ObjectParameter("vid", vid) :
                new ObjectParameter("vid", typeof(int));
    
            var vdateParameter = vdate.HasValue ?
                new ObjectParameter("vdate", vdate) :
                new ObjectParameter("vdate", typeof(System.DateTime));
    
            var vnatureParameter = vnature.HasValue ?
                new ObjectParameter("vnature", vnature) :
                new ObjectParameter("vnature", typeof(int));
    
            var vnaturenmaeParameter = vnaturenmae != null ?
                new ObjectParameter("vnaturenmae", vnaturenmae) :
                new ObjectParameter("vnaturenmae", typeof(string));
    
            var vappParameter = vapp.HasValue ?
                new ObjectParameter("vapp", vapp) :
                new ObjectParameter("vapp", typeof(int));
    
            var vappnameParameter = vappname != null ?
                new ObjectParameter("vappname", vappname) :
                new ObjectParameter("vappname", typeof(string));
    
            var vnameidParameter = vnameid.HasValue ?
                new ObjectParameter("vnameid", vnameid) :
                new ObjectParameter("vnameid", typeof(int));
    
            var vnameParameter = vname != null ?
                new ObjectParameter("vname", vname) :
                new ObjectParameter("vname", typeof(string));
    
            var empidParameter = empid.HasValue ?
                new ObjectParameter("empid", empid) :
                new ObjectParameter("empid", typeof(int));
    
            var empnameParameter = empname != null ?
                new ObjectParameter("empname", empname) :
                new ObjectParameter("empname", typeof(string));
    
            var vfromdParameter = vfromd.HasValue ?
                new ObjectParameter("vfromd", vfromd) :
                new ObjectParameter("vfromd", typeof(System.DateTime));
    
            var vtodateParameter = vtodate.HasValue ?
                new ObjectParameter("vtodate", vtodate) :
                new ObjectParameter("vtodate", typeof(System.DateTime));
    
            var vdaysParameter = vdays.HasValue ?
                new ObjectParameter("vdays", vdays) :
                new ObjectParameter("vdays", typeof(int));
    
            var vnotesParameter = vnotes != null ?
                new ObjectParameter("vnotes", vnotes) :
                new ObjectParameter("vnotes", typeof(string));
    
            var fyearParameter = fyear != null ?
                new ObjectParameter("fyear", fyear) :
                new ObjectParameter("fyear", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("hr_vactions_upd", vidParameter, vdateParameter, vnatureParameter, vnaturenmaeParameter, vappParameter, vappnameParameter, vnameidParameter, vnameParameter, empidParameter, empnameParameter, vfromdParameter, vtodateParameter, vdaysParameter, vnotesParameter, fyearParameter, errorid, errormsg);
        }
    }
}
